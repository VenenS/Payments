// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payments.Infrastructure.Data;

namespace Payments.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PaymentsDbContext))]
    [Migration("20201224100129_Init_Db")]
    partial class Init_Db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Payments.Domain.Entities.ListAllowedAddresses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AddressIP")
                        .IsRequired()
                        .HasColumnName("authorized_ip_address")
                        .HasColumnType("text");

                    b.Property<int>("IpBefore")
                        .HasColumnName("ip_before")
                        .HasColumnType("integer");

                    b.Property<int>("IpWith")
                        .HasColumnName("ip_with")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentSystem")
                        .HasColumnName("payment_system_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ip_allowlist_address");
                });

            modelBuilder.Entity("Payments.Domain.Entities.NotificationQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Count")
                        .HasColumnName("count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTimeCreate")
                        .HasColumnName("date_time_create")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTimeUpdate")
                        .HasColumnName("date_time_update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("IdPayment")
                        .HasColumnName("id_payment")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IdPayment")
                        .IsUnique();

                    b.ToTable("notification_queue");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("NotificationStatus")
                        .HasColumnName("notification_status")
                        .HasColumnType("boolean");

                    b.Property<long>("PaymentSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentSystemOrderId")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserRequestId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentSystemId");

                    b.HasIndex("UserId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("PaymentId")
                        .HasColumnName("payment_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Request")
                        .HasColumnName("request")
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnName("response")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.ToTable("payment_info");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("payment_system");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedDate = new DateTime(2020, 12, 24, 13, 1, 29, 448, DateTimeKind.Local).AddTicks(3788),
                            Name = "Yandex",
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Payments.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Education",
                            NotificationUrl = "",
                            SecretKey = "XE8tiBF2wfG3B6gj2LkPjNxgbO3IJWDYfWq5tCCAXTiy5R2sqQNVOPxa2ZFVtdDy"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Food",
                            NotificationUrl = "",
                            SecretKey = "XE8tiBF2wfG3B6gj2LkPjNxgbO3IJWDYfWq5tCCAXTiy5R2sqQNVOPxa2ZFVtdD3"
                        });
                });

            modelBuilder.Entity("Payments.Infrastructure.Data.Entities.LogMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("msg_code")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnName("msg_datetime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Severity")
                        .HasColumnName("severity")
                        .HasColumnType("text");

                    b.Property<string>("SourcePackage")
                        .HasColumnName("source_package")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnName("msg_text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("log_message");
                });

            modelBuilder.Entity("Payments.Domain.Entities.NotificationQueue", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Payment", "Payment")
                        .WithOne("NotificationQueue")
                        .HasForeignKey("Payments.Domain.Entities.NotificationQueue", "IdPayment")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Payments.Domain.Entities.PaymentSystem", "PaymentSystem")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payments.Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentInfo", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Payment", "Payment")
                        .WithOne("PaymentInfo")
                        .HasForeignKey("Payments.Domain.Entities.PaymentInfo", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
